Stat(gridn) = (9      )           1:1            av=1              sd=0
begin test
end test
func(   -1.650000)=   -0.080451
func(   -1.540000)=   -0.106785
func(   -1.430000)=   -0.124625
func(   -1.320000)=   -0.127496
func(   -1.210000)=   -0.109246
func(   -1.100000)=   -0.065018
func(   -0.990000)=    0.007819
func(   -0.880000)=    0.108937
func(   -0.770000)=    0.234665
func(   -0.660000)=    0.378017
func(   -0.550000)=    0.529199
func(   -0.440000)=    0.676527
func(   -0.330000)=    0.807672
func(   -0.220000)=    0.911056
func(   -0.110000)=    0.977227
func(    0.000000)=    1.000000
func(    0.110000)=    0.977227
func(    0.220000)=    0.911056
func(    0.330000)=    0.807672
func(    0.440000)=    0.676527
func(    0.550000)=    0.529199
func(    0.660000)=    0.378017
func(    0.770000)=    0.234665
func(    0.880000)=    0.108937
func(    0.990000)=    0.007819
func(    1.100000)=   -0.065018
func(    1.210000)=   -0.109246
func(    1.320000)=   -0.127496
func(    1.430000)=   -0.124625
func(    1.540000)=   -0.106785
filter.name() = box
name = box
sum = 1
stat = (100000 )           1:1            av=1              sd=0
filter.name() = triangle
name = triangle
sum = 1
stat = (100000 )           1:1            av=1              sd=0
filter.name() = quadratic
name = quadratic
sum = 1.00001
stat = (100000 )           1:1            av=1              sd=0
filter.name() = mitchell
name = mitchell
sum = 1
stat = (100000 )           1:1            av=1              sd=0
filter.name() = keys
name = keys
sum = 1
stat = (100000 )           1:1            av=1              sd=0
filter.name() = spline
name = spline
sum = 1
stat = (100000 )           1:1            av=1              sd=0
filter.name() = omoms
name = omoms
sum = 1
stat = (100000 )           1:1            av=1              sd=0
filter.name() = gaussian
name = gaussian
sum = 1
stat = (100000 )     0.93503:1.06497      av=1              sd=0.045942374
filter.name() = lanczos6
name = lanczos6
sum = 0.997055
stat = (100000 )    0.994299:1            av=0.99705535     sd=0.002003931
filter.name() = lanczos10
name = lanczos10
sum = 0.999353
stat = (100000 )    0.998746:1            av=0.99935263     sd=0.0004408033
filter.name() = hamming6
name = hamming6
sum = 1.00188
stat = (100000 )           1:1.00242      av=1.0018761      sd=0.00052976125
Filter::get("spline").func()(0.) = 0.666667
Filter::get("spline").func()(1.) = 0.166667
Filter::get("spline").func()(2.) = 0
Filter::get("omoms").func()(0.) = 0.619048
Filter::get("omoms").func()(1.) = 0.190476
Filter::get("omoms").func()(2.) = 0
scale_filter_nearest(grid1.view(), V(1)) = Array<int>(1) {
  3
}
scale_filter_nearest(grid1.view(), V(2)) = Array<int>(2) {
  2
  4
}
scale_filter_nearest(grid1.view(), V(3)) = Array<int>(3) {
  1
  3
  5
}
scale_filter_nearest(grid1.view(), V(4)) = Array<int>(4) {
  1
  2
  4
  5
}
scale_filter_nearest(grid1.view(), V(5)) = Array<int>(5) {
  1
  2
  3
  4
  5
}
scale_filter_nearest(grid1.view(), V(6)) = Array<int>(6) {
  1
  2
  3
  3
  4
  5
}
scale_filter_nearest(grid1.view(), V(10)) = Array<int>(10) {
  1
  1
  2
  2
  3
  3
  4
  4
  5
  5
}
scale_filter_nearest(grid1.view(), V(11)) = Array<int>(11) {
  1
  1
  2
  2
  3
  3
  3
  4
  4
  5
  5
}
scale_filter_nearest(grid2.view(), V(2, 3)) = Matrix<int>(2, 3) {
  1 3 5
  11 13 15
}
scale_filter_nearest(grid2.view(), V(1, 8)) = Matrix<int>(1, 8) {
  6 6 7 8 8 9 10 10
}
scale_filter_nearest(grid2.view(), V(4, 10)) = Matrix<int>(4, 10) {
  1 1 2 2 3 3 4 4 5 5
  6 6 7 7 8 8 9 9 10 10
  11 11 12 12 13 13 14 14 15 15
  16 16 17 17 18 18 19 19 20 20
}
scale_filter_nearest(grid3.view(), V(2, 1, 5)) = Grid<int>(2, 1, 5) {
  [0, 0, 0] = 1
  [0, 0, 1] = 2
  [0, 0, 2] = 3
  [0, 0, 3] = 4
  [0, 0, 4] = 5
  [1, 0, 0] = 101
  [1, 0, 1] = 102
  [1, 0, 2] = 103
  [1, 0, 3] = 104
  [1, 0, 4] = 105
}
scale_filter_nearest(grid3.view(), V(1, 2, 7)) = Grid<int>(1, 2, 7) {
  [0, 0, 0] = 1
  [0, 0, 1] = 2
  [0, 0, 2] = 2
  [0, 0, 3] = 3
  [0, 0, 4] = 4
  [0, 0, 5] = 4
  [0, 0, 6] = 5
  [0, 1, 0] = 11
  [0, 1, 1] = 12
  [0, 1, 2] = 12
  [0, 1, 3] = 13
  [0, 1, 4] = 14
  [0, 1, 5] = 14
  [0, 1, 6] = 15
}
scale_filter_nearest(grid3.view(), V(1, 1, 3)) = Grid<int>(1, 1, 3) {
  [0, 0, 0] = 1
  [0, 0, 1] = 3
  [0, 0, 2] = 5
}
scale_filter_nearest(grid3.view(), V(2, 2, 3)) = Grid<int>(2, 2, 3) {
  [0, 0, 0] = 1
  [0, 0, 1] = 3
  [0, 0, 2] = 5
  [0, 1, 0] = 11
  [0, 1, 1] = 13
  [0, 1, 2] = 15
  [1, 0, 0] = 101
  [1, 0, 1] = 103
  [1, 0, 2] = 105
  [1, 1, 0] = 111
  [1, 1, 1] = 113
  [1, 1, 2] = 115
}
scale_filter_nearest(grid4.view(), V(2, 2, 2, 2)) = Grid<int>(2, 2, 2, 2) {
  [0, 0, 0, 0] = 1
  [0, 0, 0, 1] = 2
  [0, 0, 1, 0] = 3
  [0, 0, 1, 1] = 4
  [0, 1, 0, 0] = 5
  [0, 1, 0, 1] = 6
  [0, 1, 1, 0] = 7
  [0, 1, 1, 1] = 8
  [1, 0, 0, 0] = 11
  [1, 0, 0, 1] = 12
  [1, 0, 1, 0] = 13
  [1, 0, 1, 1] = 14
  [1, 1, 0, 0] = 15
  [1, 1, 0, 1] = 16
  [1, 1, 1, 0] = 17
  [1, 1, 1, 1] = 18
}
scale_filter_nearest(grid4.view(), V(2, 1, 2, 2)) = Grid<int>(2, 1, 2, 2) {
  [0, 0, 0, 0] = 1
  [0, 0, 0, 1] = 2
  [0, 0, 1, 0] = 3
  [0, 0, 1, 1] = 4
  [1, 0, 0, 0] = 11
  [1, 0, 0, 1] = 12
  [1, 0, 1, 0] = 13
  [1, 0, 1, 1] = 14
}
scale_filter_nearest(grid4.view(), V(2, 4, 2, 2)) = Grid<int>(2, 4, 2, 2) {
  [0, 0, 0, 0] = 1
  [0, 0, 0, 1] = 2
  [0, 0, 1, 0] = 3
  [0, 0, 1, 1] = 4
  [0, 1, 0, 0] = 1
  [0, 1, 0, 1] = 2
  [0, 1, 1, 0] = 3
  [0, 1, 1, 1] = 4
  [0, 2, 0, 0] = 5
  [0, 2, 0, 1] = 6
  [0, 2, 1, 0] = 7
  [0, 2, 1, 1] = 8
  [0, 3, 0, 0] = 5
  [0, 3, 0, 1] = 6
  [0, 3, 1, 0] = 7
  [0, 3, 1, 1] = 8
  [1, 0, 0, 0] = 11
  [1, 0, 0, 1] = 12
  [1, 0, 1, 0] = 13
  [1, 0, 1, 1] = 14
  [1, 1, 0, 0] = 11
  [1, 1, 0, 1] = 12
  [1, 1, 1, 0] = 13
  [1, 1, 1, 1] = 14
  [1, 2, 0, 0] = 15
  [1, 2, 0, 1] = 16
  [1, 2, 1, 0] = 17
  [1, 2, 1, 1] = 18
  [1, 3, 0, 0] = 15
  [1, 3, 0, 1] = 16
  [1, 3, 1, 0] = 17
  [1, 3, 1, 1] = 18
}
scale_filter_nearest(grid4.view(), V(1, 2, 5, 2)) = Grid<int>(1, 2, 5, 2) {
  [0, 0, 0, 0] = 1
  [0, 0, 0, 1] = 2
  [0, 0, 1, 0] = 1
  [0, 0, 1, 1] = 2
  [0, 0, 2, 0] = 1
  [0, 0, 2, 1] = 2
  [0, 0, 3, 0] = 3
  [0, 0, 3, 1] = 4
  [0, 0, 4, 0] = 3
  [0, 0, 4, 1] = 4
  [0, 1, 0, 0] = 5
  [0, 1, 0, 1] = 6
  [0, 1, 1, 0] = 5
  [0, 1, 1, 1] = 6
  [0, 1, 2, 0] = 5
  [0, 1, 2, 1] = 6
  [0, 1, 3, 0] = 7
  [0, 1, 3, 1] = 8
  [0, 1, 4, 0] = 7
  [0, 1, 4, 1] = 8
}
scale_filter_nearest(grid4.view(), V(6, 2, 2, 2)) = Grid<int>(6, 2, 2, 2) {
  [0, 0, 0, 0] = 1
  [0, 0, 0, 1] = 2
  [0, 0, 1, 0] = 3
  [0, 0, 1, 1] = 4
  [0, 1, 0, 0] = 5
  [0, 1, 0, 1] = 6
  [0, 1, 1, 0] = 7
  [0, 1, 1, 1] = 8
  [1, 0, 0, 0] = 1
  [1, 0, 0, 1] = 2
  [1, 0, 1, 0] = 3
  [1, 0, 1, 1] = 4
  [1, 1, 0, 0] = 5
  [1, 1, 0, 1] = 6
  [1, 1, 1, 0] = 7
  [1, 1, 1, 1] = 8
  [2, 0, 0, 0] = 1
  [2, 0, 0, 1] = 2
  [2, 0, 1, 0] = 3
  [2, 0, 1, 1] = 4
  [2, 1, 0, 0] = 5
  [2, 1, 0, 1] = 6
  [2, 1, 1, 0] = 7
  [2, 1, 1, 1] = 8
  [3, 0, 0, 0] = 11
  [3, 0, 0, 1] = 12
  [3, 0, 1, 0] = 13
  [3, 0, 1, 1] = 14
  [3, 1, 0, 0] = 15
  [3, 1, 0, 1] = 16
  [3, 1, 1, 0] = 17
  [3, 1, 1, 1] = 18
  [4, 0, 0, 0] = 11
  [4, 0, 0, 1] = 12
  [4, 0, 1, 0] = 13
  [4, 0, 1, 1] = 14
  [4, 1, 0, 0] = 15
  [4, 1, 0, 1] = 16
  [4, 1, 1, 0] = 17
  [4, 1, 1, 1] = 18
  [5, 0, 0, 0] = 11
  [5, 0, 0, 1] = 12
  [5, 0, 1, 0] = 13
  [5, 0, 1, 1] = 14
  [5, 1, 0, 0] = 15
  [5, 1, 0, 1] = 16
  [5, 1, 1, 0] = 17
  [5, 1, 1, 1] = 18
}
scale_filter_nearest(grid4.view(), V(3, 2, 2, 5)) = Grid<int>(3, 2, 2, 5) {
  [0, 0, 0, 0] = 1
  [0, 0, 0, 1] = 1
  [0, 0, 0, 2] = 1
  [0, 0, 0, 3] = 2
  [0, 0, 0, 4] = 2
  [0, 0, 1, 0] = 3
  [0, 0, 1, 1] = 3
  [0, 0, 1, 2] = 3
  [0, 0, 1, 3] = 4
  [0, 0, 1, 4] = 4
  [0, 1, 0, 0] = 5
  [0, 1, 0, 1] = 5
  [0, 1, 0, 2] = 5
  [0, 1, 0, 3] = 6
  [0, 1, 0, 4] = 6
  [0, 1, 1, 0] = 7
  [0, 1, 1, 1] = 7
  [0, 1, 1, 2] = 7
  [0, 1, 1, 3] = 8
  [0, 1, 1, 4] = 8
  [1, 0, 0, 0] = 1
  [1, 0, 0, 1] = 1
  [1, 0, 0, 2] = 1
  [1, 0, 0, 3] = 2
  [1, 0, 0, 4] = 2
  [1, 0, 1, 0] = 3
  [1, 0, 1, 1] = 3
  [1, 0, 1, 2] = 3
  [1, 0, 1, 3] = 4
  [1, 0, 1, 4] = 4
  [1, 1, 0, 0] = 5
  [1, 1, 0, 1] = 5
  [1, 1, 0, 2] = 5
  [1, 1, 0, 3] = 6
  [1, 1, 0, 4] = 6
  [1, 1, 1, 0] = 7
  [1, 1, 1, 1] = 7
  [1, 1, 1, 2] = 7
  [1, 1, 1, 3] = 8
  [1, 1, 1, 4] = 8
  [2, 0, 0, 0] = 11
  [2, 0, 0, 1] = 11
  [2, 0, 0, 2] = 11
  [2, 0, 0, 3] = 12
  [2, 0, 0, 4] = 12
  [2, 0, 1, 0] = 13
  [2, 0, 1, 1] = 13
  [2, 0, 1, 2] = 13
  [2, 0, 1, 3] = 14
  [2, 0, 1, 4] = 14
  [2, 1, 0, 0] = 15
  [2, 1, 0, 1] = 15
  [2, 1, 0, 2] = 15
  [2, 1, 0, 3] = 16
  [2, 1, 0, 4] = 16
  [2, 1, 1, 0] = 17
  [2, 1, 1, 1] = 17
  [2, 1, 1, 2] = 17
  [2, 1, 1, 3] = 18
  [2, 1, 1, 4] = 18
}
grid_column<0>(grid4.view(), V(0, 0, 0, 0)) = StridedArray<int>(2) {
  1
  11
}
grid_column<0>(grid4.view(), V(0, 0, 0, 1)) = StridedArray<int>(2) {
  2
  12
}
grid_column<0>(grid4.view(), V(0, 1, 1, 1)) = StridedArray<int>(2) {
  8
  18
}
grid_column<1>(grid4.view(), V(0, 0, 0, 0)) = StridedArray<int>(2) {
  1
  5
}
grid_column<1>(grid4.view(), V(0, 0, 0, 1)) = StridedArray<int>(2) {
  2
  6
}
grid_column<1>(grid4.view(), V(1, 0, 1, 1)) = StridedArray<int>(2) {
  14
  18
}
grid_column<3>(grid4.view(), V(1, 1, 1, 0)) = StridedArray<int>(2) {
  17
  18
}
