CXX = clang++
CC = clang

ifneq ($(is_mswin),)
  LDOUTPUT = -o $@.exe#  otherwise I get names without extension (unlike with gcc)
endif

ifeq ($(plain_compiler),)
  STD_CXX ?= -std=c++14#  previously was -std=gnu++11 then -std=gnu++14
endif

include $(dir $(lastword $(MAKEFILE_LIST)))/Makefile_base_gcc

ifeq ($(omit_omp:0=),)  # OpenMP support started in clang 4.0
ccommon += -fopenmp
last_libs += -llibomp
endif

ifeq ($(plain_compiler),)
  cxxall += -fno-fast-math $(gcc_safe_precise_math)#  for my test suite
  cxxall += -msse4.1
  # cxxall += -frtti#  optional "run-time type information", required for some examples in ./test/native
  cwarnings += -Weverything -Wno-undef -Wno-c++98-compat-pedantic -Wno-global-constructors \
    -Wno-covered-switch-default -Wno-switch-enum -Wno-unreachable-code -Wno-sign-conversion \
    -Wno-unused-macros -Wno-padded -Wno-shadow \
    -Wno-conversion -Wno-exit-time-destructors \
    -Wno-float-equal -Wno-missing-prototypes -Wno-missing-noreturn -Wno-weak-vtables \
    -Wno-disabled-macro-expansion
  ccommon += -Wno-constant-logical-operand#  even if $(less_pedantic)
  ifneq ($(is_mac),1)
    cwarnings += -Wno-source-uses-openmp -Wno-reserved-id-macro -Wno-unreachable-code-return -Wno-unreachable-code-break
  endif
  #  -Wno-header-hygiene -Wno-format-nonliteral   -Wno-old-style-cast  -Wno-error=old-style-cast

  # Try Neon on imaginary ARM target, to test Vector4.h using ./test/tVector4.ou
  # cxxall := $(filter-out -m32 -march=native -mfpmath=sse -ffast-math,$(cxxall))  -target armv7a-pc-mingw32 -mfpu=neon -mfloat-abi=hard -D__NO_INLINE__=1 -D__MSVCRT__=1

  # cxxrel += -gline-tables-only
  #
  # http://stackoverflow.com/questions/10990018/how-to-generate-assembly-code-with-clang-in-intel-syntax
  # cxx_list_assembly_code = -S -mllvm --x86-asm-syntax=intel
  # Unfortunately, clang cannot emit *.s assembler output while also creating the *.o object file,
  #  so for now I would have to do this manually by directly calling make on *.s using above.
  cxx_list_assembly_code =
endif

%.s : %.cpp
# I see no way to interleave source code in assembly listing; -g -fverbose-asm do not help, -Wa,-achln unrecognized
	$(filter-out ,$(COMPILE.cpp)) -S -mllvm --x86-asm-syntax=intel $(@:$(extasm)=cpp)
#	rm -f v.$(@:$(extasm)=$(extobj))

%.h.pch : %.h
	@echo Making $(@) from $<
	@rm -f $(@)  # because we actually "-include" itself to get the right path when building it.
	@$(COMPILE.cpp) -x c++-header -o $@ $<


## precompiled headers:
# http://clang.llvm.org/docs/UsersManual.html#precompiled-headers 
#  http://clang.llvm.org/docs/PCHInternals.html
# 
# clang test.h -o test.h.pch
# clang -include test.h test.c -o test     # unlike cl and gcc, clang does not allow header to be included from the cpp file; it must appear on this command line.


## clang-modernize:
# cp -rp ~/src ~/tmp
# cd ~/tmp/src
# foreach i (*/*.{cpp,h})
# foreach i ({Filterterrain,G3dOGL,G3dVec}/*.{cpp,h} libHh/BinarySearch.h samplesphere/vec2_3.h Filtergim/rebin3.h)
#  echo "** $i"
#  if ($i =~ old/* || $i =~ other/*) continue
#  c:/progra~2/llvm/bin/clang-modernize -summary "$i" -- -Ic:/hh/src/include -Ic:/hh/src/libHh -Ic:/hh/src/libHWin -Ic:/hh/src/G3dOGL -std=gnu++11 -x c++ -march=native -mfpmath=sse -w | grep -v " - Accepted: 0"
#  tounix "$i" >&nul
# end


## clang-format:
# c:/progra~2/llvm/bin/clang-format -style=google -dump-config
# c:/progra~2/llvm/bin/clang-format -style="{BasedOnStyle: Google, IndentWidth: 4, ColumnLimit: 110}" GMesh.cpp >GMesh_google2.cpp
#  Drawbacks:
#   loses my 48-tab indents in *.h !
#   bcase not recognized
#   } EndFor   is broken up
#   binary operators != == + - * /   too many spaces
#   Vec<int, 3>   has space
# 
#   it breaks nicely parallel statements such as following into multiple lines:
#       Vector scol(0.f, 0.f, 0.f); bool havecol = true;
#       Vector snor(0.f, 0.f, 0.f); bool havenor = true;
#
#   always breaks for loops to multiple lines, even if short as in following:
#        for (Face ff : faces(en)) { set_string(ff, fstring.get()); }
#
#  Inspiring:
#   minimum 2 spaces before in-line comment is nice
#   neat indenting of ternary operator ("?" and ":" are parallel):
#       const char* send =
#        (ch == '(' ? assertv(str_chr(_s + nch + 2, ')'))
#                   : ch == '"' ? assertv(str_chr(_s + nch + 2, '"'))
#                               : std::isalnum(ch) ? str_last_non_space(_s + nch + 2) : nullptr);
#
# set r = GMesh.cpp; cat $r | perl -pe 'binmode(STDOUT); s/\bbcase\b/break; case/g; s/\bbdefault\b/break; default/g' | c:/progra~2/llvm/bin/clang-format -style="{UseTab: Never, IndentWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, NamespaceIndentation: All, ColumnLimit: 110}" >~/tmp/$r
#  It shows how much the code becomes longer.


## sanitize/analyze:
# clang -O1 -g -fsanitize=address -fno-omit-frame-pointer example_UseAfterFree.cc
# clang -fsanitize=memory -fno-omit-frame-pointer -g -O2 umr.cc
#
# See ./test/native/test_sanitize_address.cpp and ~/src/test/native/Makefile
# At this time, MemorySanitizer supports Linux x86_64 only.
# 
# Address sanitizer:
# Be warned though that it only works so far on Linux and Mac. No luck for MinGW.
#
# Static analyzer: scan-build
#  not found in c:/progra~2/llvm/
#
# clang --analyze
#  doesn't seem to work; all indications is that this should be replaced by scan-build


## Old

# ccommon += -D__STRICT_ANSI__  # to fix "error: use of undeclared identifier '__float128'"
# Instead, setting -std=gnu++11 disables __STRICT_ANSI__ (useful to get _exit, _fdopen, etc.) without
#  introducing error about undeclared identifier '__float128'.
# Instead, added "typedef struct { long double x, y; } __float128;" in libHh/Hh.h

# cxxall += -stdlib=libc++#  http://stackoverflow.com/questions/24497956/is-codecvt-not-supported-by-clang-or-gcc
