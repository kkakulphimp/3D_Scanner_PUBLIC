# For use as:
#  HhRoot = ..
#  include $(HhRoot)/make/Makefile_lib

ifeq ($(defs_loaded),)
  include $(HhRoot)/make/Makefile_defs
endif

ifneq ($(CONFIG),all)

troot ?= $(notdir $(abspath .))
tlib ?= $(troot).$(extlib)

all: $(tlib)

depend $(make_dep):
	$(cmd_makedep)

ifeq ($(include_make_dep),1)
  -include $(make_dep)
endif

$(obj): built_ob.$(extobj).$(CONFIG)
built_ob.$(extobj).$(CONFIG):
	@rm -f $(obj) $(tlib) $(CRUMBS) built_ob.$(extobj).*
	@touch built_ob.$(extobj).$(CONFIG)

clean:
	rm -f $(obj) built_ob.$(extobj).$(CONFIG) $(CRUMBS)
deepclean: clean
	rm -f $(make_dep) $(tlib)

.PHONY: all depend clean deepclean

ifeq ($(CXX),cl)  # (was: ifeq ($(extobj),obj))

  ccommon += -Fd$(troot).pdb#  unfortunately, the filename gets mapped to lowercase by CL.exe; no workaround.
  # Compile library C code using "-Zl" flag to omit reference to standard C (rather than C++) library,
  c-all += -Zl

  $(tlib): $(obj)
	lib -nologo $(if $(call file_exists,$(tlib)),$@ $?,-out:$@ $^) $(ltcg)
  # Above version only rebuilds from scratch if library does not exist.
  #	@echo obj=$(obj) mod=$?
  #	lib -nologo -out:$@ $^

else

  $(tlib): $(obj)  # "ar cr" does a merge; flag "c" only creates library if it does not already exist
	@if [ ! -f $(tlib) ]; then \
	  echo Creating library $@; \
	  $(AR) cr $@ $(obj); \
	else \
	  echo Updating library $@ by merging files $?; \
	  $(AR) cr $@ $?; \
	fi
	@ranlib $@

endif

endif  # ifneq ($(CONFIG),all)
